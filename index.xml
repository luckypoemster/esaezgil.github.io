<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hej, I&#39;m Enrique</title>
    <link>https://esaezgil.com/index.xml</link>
    <description>Recent content on Hej, I&#39;m Enrique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Mar 2017 15:16:33 +0100</lastBuildDate>
    <atom:link href="https://esaezgil.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unit-testing pitfalls &amp; pytest basic features</title>
      <link>https://esaezgil.com/post/unittesting_pitfalls/</link>
      <pubDate>Sat, 25 Mar 2017 15:16:33 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/unittesting_pitfalls/</guid>
      <description>&lt;p&gt;Lately, I have been answering some questions in &lt;a href=&#34;http://stackoverflow.com/users/4378118/enrique?tab=profile&#34;&gt;StackOverflow&lt;/a&gt; related to Unit Testing in Python with &lt;a href=&#34;http://www.voidspace.org.uk/python/mock/&#34;&gt;Mock&lt;/a&gt; and &lt;a href=&#34;http://doc.pytest.org/en/latest/&#34;&gt;pytest&lt;/a&gt;. These are some of the questions I answered:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42676681/pytest-and-yield-based-tests/42753785#42753785&#34;&gt;pytest and yield based tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/41314953/pytest-how-to-force-raising-exceptions-during-unit-testing/42753384#42753384&#34;&gt;pytest: How to force raising Exceptions during unit-testing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42704292/mocking-file-open-and-throwing-exception/42707396#42707396&#34;&gt;Mocking file open and throwing exception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42631344/how-to-avoid-a-trip-to-the-database-in-this-test-case&#34;&gt;Avoiding a call to the database during tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42788644/python-how-to-test-random-choice/42847033&#34;&gt;Python how to test random choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42674971/testing-constructor-using-mock/42846459&#34;&gt;Testing constructor using mock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42824059/preset-input-for-unit-tests-in-python-3/42827843&#34;&gt;Preset input for Unit tests in Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42819073/mocking-api-calls-in-unit-testing/42820601&#34;&gt;Mocking API calls in unit testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Going through the list, there are some common pitfalls that can be identified related to the misunderstanding of basic python unit tests concepts and pytest features and inner workings. Inspired by a &lt;a href=&#34;http://alexmarandon.com/articles/python_mock_gotchas/&#34;&gt;similar post&lt;/a&gt; I recently bumped into, I will go through them in detail.&lt;/p&gt;

&lt;h1 id=&#34;what-does-patch-do&#34;&gt;What does patch do?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.diveintopython.net/getting_to_know_python/everything_is_an_object.html&#34;&gt;Everything in Python is an object&lt;/a&gt;. As detailed in the &lt;a href=&#34;https://docs.python.org/3/library/unittest.mock.html#quick-guide&#34;&gt;Python docs&lt;/a&gt; the patch decorator/context manager allows to easily mocking classes/objects. Any class/object can be replaced with either a mock, or in general any other object, during the test and restored afterwards.&lt;/p&gt;

&lt;p&gt;Therefore, patch allows to mock objects/calls in order to return predefined objects/constants/whatnot. This is really useful when testing system that interact with third parties, allowing for the removal of dependencies during tests.&lt;/p&gt;

&lt;h2 id=&#34;patching-external-dependencies&#34;&gt;Patching external dependencies&lt;/h2&gt;

&lt;p&gt;The following question, highlights precisely the aforementioned usage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42631344/how-to-avoid-a-trip-to-the-database-in-this-test-case/42794893#42794893&#34;&gt;How to avoid a trip to the database in this Test case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;.models&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; ApplicationType

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;get_application_type&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, value):
 item_name &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Application Type&amp;quot;&lt;/span&gt;
 &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;base_details[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;application_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;
 &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
     &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; value:
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
             result &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; ApplicationType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;get(title&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;value) &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# &amp;lt;= How do I avoid hitting this DB object?&lt;/span&gt;
             &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;base_details[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;application_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;id
             &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;
          &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;except&lt;/span&gt; ApplicationType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;DoesNotExist:
            [&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;]
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;else&lt;/span&gt;:
           &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;error_msg &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Blank Value: {}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;format(item_name)
           &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
 &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;except&lt;/span&gt;:
     &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During unit-testing it is a requirement to avoid the interaction with a third-party service. In order to do so, we can use patch as follows (notice that this is for illustrative purposes and I do not necessarily agree with what and how it is being tested):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@pytest.mark.parametrize&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;, [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Type 1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Type 2&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;ApplicationType.objects.get&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_get_application_type_populates_dict_when_value_provided_exists_in_database&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, db_mocked_call, entry):
    mocked_db_object &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;test_id&amp;#39;&lt;/span&gt;}
    db_mocked_call&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; mocked_db_object
    application_type &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; ApplicationTypeFactory&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;build(title&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;entry)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;base_info_values&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;get_application_type(entry) &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;base_info_values&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;base_details[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;application_type&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the test above, it can be seen that the call to the database is being patched. Furthermore, a dictionary, &lt;code&gt;mocked_db_object&lt;/code&gt;, will be returned when the call is made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This approach yields complete control over the inputs and outputs of our test and allowing to deterministically validate the code&lt;/strong&gt;. The usage of &lt;code&gt;parametrize&lt;/code&gt; is reviewed in detail further below.&lt;/p&gt;

&lt;p&gt;However, this does not imply that the integration with third-party services should not be tested through integration tests as I detailed in &lt;a href=&#34;http://esaezgil.com/post/test_driven_API/&#34;&gt;my previous post about test driven APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A similar example is the following one in which the calls to the &lt;a href=&#34;https://redis.io/&#34;&gt;Redis database&lt;/a&gt; required patching:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42819073/mocking-api-calls-in-unit-testing/42820601&#34;&gt;Mocking API calls in unit testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;redispool &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;myRedis&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;object&lt;/span&gt;):

  &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, redisHost, redisPort, redisDBNum):
      [&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;]

      &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;global&lt;/span&gt; redispool
      redispool &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; redis&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ConnectionPool(host&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;_redishost,
                                            port&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;_redisport,
                                            db&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;_redisdb)

  &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;write_redis&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, key, value):
       retval &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;_redis_instance&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set(key, value)
       LOGGER&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Writing data to redis (&lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;). Retval=&lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt;, key, value, retval)
       &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; retval
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@mock.patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;redis.StrictRedis.set&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_myRedis_write&lt;/span&gt;(mock_strict_redis_set):
    mock_strict_redis_set&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; {}
    myRedisObj &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; myRedis(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;11&amp;#39;&lt;/span&gt;)
    redis_connect &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; myRedisObj&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;redis_connect()
    connect &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; myRedisObj&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;write_redis(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; connect &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; {}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the previous examples show, one of the most important concepts is knowing &lt;a href=&#34;https://docs.python.org/3/library/unittest.mock.html#where-to-patch&#34;&gt;where to patch&lt;/a&gt;, which the linked docs explain quite clearly.&lt;/p&gt;

&lt;p&gt;Finally, check the following question showing that checking the output of the calls being tested is not always required. Instead, what should be checked is that the calls took place with functions like &lt;code&gt;called_with&lt;/code&gt; or &lt;code&gt;call_count&lt;/code&gt;:
&lt;a href=&#34;http://stackoverflow.com/questions/42824059/preset-input-for-unit-tests-in-python-3/42827843&#34;&gt;Preset input for Unit tests in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;testing-exceptions&#34;&gt;Testing exceptions:&lt;/h2&gt;

&lt;p&gt;One of the key behaviors to test are exception handling. The way to test that exceptions are raised is by patching the call that can raise the exception. This can be achieved through the &lt;code&gt;side_effect&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The next example shows how to force raising an exception to test that it is properly managed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42704292/mocking-file-open-and-throwing-exception/42707396#42707396&#34;&gt;Mocking file open and throwing exception&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;validate_json_specifications&lt;/span&gt;(path_to_data_folder, json_file_path, json_data) &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;:

     schema_file_path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;join(path_to_data_folder, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;, os&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;basename(json_file_path))
     resolver &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; RefResolver(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; schema_file_path, &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;)
     &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;open&lt;/span&gt;(schema_file_path) &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; schema_data:
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
             Draft4Validator(json&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;load(schema_data), resolver&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;resolver)&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;validate(json_data)
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;except&lt;/span&gt; ValidationError &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
             &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;)
             &lt;span style=&#34;color: #336666&#34;&gt;exit&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The non-working tests for this code were as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;builtins.open&amp;#39;&lt;/span&gt;, mock_open(read_data&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;{}))
&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;myproject.common.helper.jsonschema&amp;#39;&lt;/span&gt;, Draft4Validator())
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_validate_json_specifications&lt;/span&gt;(mock_file_open, draft_4_validator_mock):
    validate_json_specifications(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;foo_path_to_data&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;foo_json_file_path&amp;#39;&lt;/span&gt;, {})
    mock_file_open&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;assert_called_with(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;foo_path_to_data/schema/foo_json_file_path&amp;#39;&lt;/span&gt;)
    draft_4_validator_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;assert_called()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The person asking was trying to use the patch wrong and not taking advantage of &lt;code&gt;side_effect&lt;/code&gt;. As it can be seen, every time the &lt;code&gt;jsonschema&lt;/code&gt; function of the module being tested was called, a &lt;code&gt;Draft4Validator&lt;/code&gt; object would have been created (had the class been correctly instantiated).&lt;/p&gt;

&lt;p&gt;Instead, the Draft4Validator object is the one to be mocked and the relevant calls to any of its methods the ones to be patched.
An example of such way to proceed can be found in the answer I posted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;sys.exit&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;myproject.common.helper.jsonschema.Draft4Validator&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;builtins.open&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_validate_json_specifications&lt;/span&gt;(mock_file_open, draft_4_validator_mock, exit_mock):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; pytest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;raises(ValidationError):
        mock_file_open&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; {}
        draft_4_validator_mock &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Mock()
        draft_4_validator_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;side_effect &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; ValidationError

        validate_json_specifications(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;foo_path_to_data&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;foo_json_file_path&amp;#39;&lt;/span&gt;, {})

        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; draft_4_validator_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;call_count &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; draft_4_validator_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;validate&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;assert_called_with({})        
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; exit_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;call_count &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the previous test we can check again how easy it is to test the expected path for the exception through the creation of a mock object and associating a &lt;code&gt;side_effect&lt;/code&gt; to it.&lt;/p&gt;

&lt;h1 id=&#34;pytest-basic-features&#34;&gt;pytest basic features:&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;pytest.org&#34;&gt;Pytest&lt;/a&gt; is a very powerful testing framework and knowing about the feaures that it provides helps creating a robust and concise testing architecture for your project.&lt;/p&gt;

&lt;p&gt;Some of the most common used features are the following:&lt;/p&gt;

&lt;h2 id=&#34;testing-that-exceptions-are-raised&#34;&gt;Testing that exceptions are raised&lt;/h2&gt;

&lt;p&gt;Fortunately, pytest provides powerful features to &lt;a href=&#34;http://doc.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions&#34;&gt;test that exceptions are handled properly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next example shows how to force raising an exception and test that it actually raised:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/41314953/pytest-how-to-force-raising-exceptions-during-unit-testing/42753384#42753384&#34;&gt;pytest: How to force raising Exceptions during unit-testing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;MyRequest&lt;/span&gt;(metaclass&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;Singleton):

     &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, retry_tries&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, retry_backoff&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0.1&lt;/span&gt;, retry_codes&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;):
         [&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;]

     &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, request_method, request_url, &lt;span style=&#34;color: #555555&#34;&gt;**&lt;/span&gt;kwargs):
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
             &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;session&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;request(method&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;request_method, url&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;request_url, &lt;span style=&#34;color: #555555&#34;&gt;**&lt;/span&gt;kwargs)
         &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #CC0000; font-weight: bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; ex:
             log&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;warning([&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;]])
             &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The test could look something similar to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;requests.exceptions&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; ConnectTimeout, ReadTimeout, Timeout
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;unittest.mock&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; patch
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;pytest&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;TestRequestService&lt;/span&gt;:
    &lt;span style=&#34;color: #9999FF&#34;&gt;@pytest.mark.parametrize&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;expected_exception&amp;quot;&lt;/span&gt;, [ConnectTimeout, ReadTimeout, Timeout])
    &lt;span style=&#34;color: #9999FF&#34;&gt;@patch&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;path_to_module.MyRequest&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_custom_request&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, my_request_mock, expected_exception):
        my_request_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;request&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;side_effect &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; expected_exception
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; pytest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;raises(expected_exception):
            my_request_mock&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;request(Mock(), Mock())
    [&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how easily &lt;code&gt;side_effect&lt;/code&gt; allows for the testing of the proper management of the exception.&lt;/p&gt;

&lt;h2 id=&#34;pytest-parametrize&#34;&gt;pytest parametrize:&lt;/h2&gt;

&lt;p&gt;One of the most sought after behaviors when testing is actually testing the correctness of a myriad of relevant inputs/outputs. For this purpose, pytest provides a feature that yields such flexibility in a compact way through &lt;code&gt;parametrize&lt;/code&gt;. The following questions are scenarios in which &lt;code&gt;parametrize&lt;/code&gt; is highly relevant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/42676681/pytest-and-yield-based-tests/42753785#42753785&#34;&gt;pytest and yield based tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;is_equal&lt;/span&gt;(a, b):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; a &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can test such a simple scenario with some tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;pytest&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;TestComplexScenario&lt;/span&gt;:
    &lt;span style=&#34;color: #9999FF&#34;&gt;@pytest.mark.parametrize&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;my_integer&amp;quot;&lt;/span&gt;, [&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;])
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_complex&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, my_integer):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; is_equal(my_integer, my_integer)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The sample output looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;test_complex.py::TestComplexScenario::test_complex&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt; PASSED
test_complex.py::TestComplexScenario::test_complex&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt; PASSED
test_complex.py::TestComplexScenario::test_complex&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt; PASSED
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where it can be checked that all the inputs were tested.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python lists: pop vs slice performance</title>
      <link>https://esaezgil.com/post/python_list_pop_slice/</link>
      <pubDate>Wed, 22 Feb 2017 15:16:33 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/python_list_pop_slice/</guid>
      <description>&lt;p&gt;Recently I had a comment in a merge request in which I was suggested to copy the &lt;code&gt;Nth-1&lt;/code&gt; last elements of a list, &lt;code&gt;a[1:]&lt;/code&gt;, instead of popping its first element, &lt;code&gt;pop(0)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I was curious about its performance implications and decided to do some simple tests: &lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;t1 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;a=50*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];a.pop(0)&amp;#39;&lt;/span&gt;)
t2 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;b=50*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];b[1:]&amp;#39;&lt;/span&gt;)
t1&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;6.973965995712205e-07&lt;/span&gt;
t2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;8.281046990305186e-07&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown in the results above, the difference is insignificant at least for small lists.&lt;/p&gt;

&lt;p&gt;Checking for bigger lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;t1 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;a=5000*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];a.pop(0)&amp;#39;&lt;/span&gt;)
t2 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;b=5000*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];b[1:]&amp;#39;&lt;/span&gt;)
t1&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;2.4743527399550657e-05&lt;/span&gt;
t2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;4.327827289962443e-05&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;shows that there&amp;rsquo;s a ~53% performance penalty of slicing versus popping.&lt;/p&gt;

&lt;p&gt;Checking even bigger lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;t1 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;a=50000*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];a.pop(0)&amp;#39;&lt;/span&gt;)
t2 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; timeit&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Timer(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;b=50000*[&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;];b[1:]&amp;#39;&lt;/span&gt;)
t1&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;0.0002497872758001904&lt;/span&gt;
t2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;timeit(&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;0.00044558706480020194&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;shows that slicing the list carries a performance penalty of ~50% compared to just doing a pop of the first element. This penalty seems to plateau after a certain list size.&lt;/p&gt;

&lt;h1 id=&#34;some-resources-to-check&#34;&gt;Some resources to check:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.python.org/moin/TimeComplexity&#34;&gt;Time complexity in the Python wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.laurentluce.com/posts/python-list-implementation/&#34;&gt;Python list implementation explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pgbovine.net/cpython-internals.htm&#34;&gt;CPython internals: A ten-hour codewalk through the Python interpreter source code by Philip Guo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LaTeX and moderncv in macOS</title>
      <link>https://esaezgil.com/post/moderncv_latex_mac/</link>
      <pubDate>Sat, 11 Feb 2017 18:25:12 +0200</pubDate>
      
      <guid>https://esaezgil.com/post/moderncv_latex_mac/</guid>
      <description>&lt;p&gt;Confronted with the task of writing a CV for the first time many students resort to Microsoft Word and sloppy templates to be found on the Internet. &lt;/p&gt;

&lt;p&gt;Recently, I was helping a family friend proofreading her CV and decided to also teach her about &lt;a href=&#34;http://www.latex-project.org/about/&#34;&gt;LaTeX&lt;/a&gt; and &lt;a href=&#34;https://github.com/xdanaux/moderncv&#34;&gt;moderncv&lt;/a&gt; in order to craft a high quality CV for her summer internship applications.&lt;/p&gt;

&lt;p&gt;I used LaTeX extensively in the past to write my &lt;a href=&#34;http://projekter.aau.dk/projekter/en/studentthesis/enabling-the-spectral-efficient-coexistence-of-device-to-device-and-device-to-infrastructure-communications-through-opportunistic-interference-cancellation(6171379f-9d84-4eb0-a7fe-b14d830e4a6e).html&#34;&gt;Master Thesis&lt;/a&gt;, multiple essays and student projects during my Master studies. Since I had been using &lt;a href=&#34;https://miktex.org/&#34;&gt;MiKTeX&lt;/a&gt; in Windows, which takes quite a lot of space in the hard drive, I decided to check if I could make it through with a minimal LaTeX installation in my MacBook. Fortunately, this was the case:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;moderncv and LaTeX minimal requirements for macOS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.tug.org/mactex/morepackages.html&#34;&gt;BasicTeX&lt;/a&gt;: BasicTeX is a subset of TeX Live of size 110 megabytes instead of 2 gigabytes. Perfect for our purposes!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.xm1math.net/texmaker/download.html&#34;&gt;Texmaker&lt;/a&gt;: Texmaker is my favorite LaTeX editor, it is free and cross-platform.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://amaxwell.github.io/tlutility/&#34;&gt;TeX Live Utility&lt;/a&gt;: a graphical interface for &lt;a href=&#34;http://www.tug.org/texlive/tlmgr.html&#34;&gt;TeX Live Manager&lt;/a&gt;, which is a tool provided to update and maintain TeX Live. We will use &lt;em&gt;TeX Live Utility&lt;/em&gt; to install moderncv and some extra packages required.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing the previous, we need to install moderncv along some extra requirements through TeX Live Utility. As shown in the picture below, it can be done by simply searching for the packages and installing them.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://esaezgil.com/img/TeXLiveUtility.png&#34; width=&#34;720&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Installing packages with TeX Live Utility&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The complete list of packages to be installed through TeX Live Utility are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;moderncv&lt;/li&gt;
&lt;li&gt;xpatch&lt;/li&gt;
&lt;li&gt;fontawesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this relatively short process you should be ready to start writing your shiny new CV.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&#34;https://github.com/xdanaux/moderncv&#34;&gt;Xavier Danaux&amp;rsquo;s GitHub&lt;/a&gt; for examples or &lt;a href=&#34;http://www.latextemplates.com/template/moderncv-cv-and-cover-letter&#34;&gt;LaTeX Templates&lt;/a&gt; to help you get started.&lt;/p&gt;

&lt;p&gt;Finally, bear in mind that moderncv includes a fantastic template for cover letters as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Test-driven information system services</title>
      <link>https://esaezgil.com/post/test_driven_API/</link>
      <pubDate>Fri, 27 Jan 2017 13:27:21 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/test_driven_API/</guid>
      <description>&lt;p&gt;Working for the backend service at &lt;a href=&#34;https://www.skyscanner.net/hotels&#34;&gt;Skyscanner Hotels&lt;/a&gt; I take part in the development of new services and its associated APIs quite regularly.
&lt;/p&gt;

&lt;p&gt;When it comes to API design and development, breaking API changes might void the work of other teams&amp;rsquo; work, haphazard the timely product delivery, negatively impact several KPIs and be responsible for not delivering any user value and of course break the service for existing users.&lt;/p&gt;

&lt;p&gt;Therefore, a flexible yet strong API contract from the beginning allows for the parallelization of the work, a much faster iteration and an incremental release of functionality.&lt;/p&gt;

&lt;p&gt;This post aims to describe a strategy for validating and enforcing an API contract during its iterative development.&lt;/p&gt;

&lt;h1 id=&#34;test-driven-apis&#34;&gt;Test-driven APIs&lt;/h1&gt;

&lt;p&gt;During the development of an information system service, a solid development pipeline requires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a strong test suite&lt;/li&gt;
&lt;li&gt;an automated test infrastructure&lt;/li&gt;
&lt;li&gt;a zero-click deployment process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Such a solid pipeline along a well-defined vision for the product plays a central role to the overall success of the project and the ever-increasing value delivery to the user.&lt;/p&gt;

&lt;p&gt;Furthermore, a strong test suite implies covering all layers of the service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the most basic behavior through Unit Tests&lt;/li&gt;
&lt;li&gt;the integration with third-party services through Integration Tests&lt;/li&gt;
&lt;li&gt;the overall user-facing functionality through Acceptance Tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;figure&gt;
&lt;img src=&#34;https://esaezgil.com/img/testing_pyramid.png&#34; width=&#34;360&#34; height=&#34;305&#34;/&gt;
&lt;figcaption&gt;
&lt;b&gt;Figure 1: &lt;/b&gt;Testing pyramid showing the decremental amount of tests a system should have for higher abstractions&lt;br&gt;
(original source: &lt;a href=&#34;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&#34;&gt;google testing blog&lt;/a&gt;)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As shown in Figure 1, a decremental test suite is based on the fact that the width and depth of tests covering the most basic behavior, though Unit Tests, will allow for a less exhaustive coverage of the subsequent testing stages.&lt;/p&gt;

&lt;p&gt;Every higher logical abstraction implies a longer testing time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration tests: require interaction with third-party services&lt;/li&gt;
&lt;li&gt;Acceptance tests: require setting up blank production-like environments on the fly and interact with third-party services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, when it comes to acceptance tests for complex yet flexible APIs, the myriad of possible scenarios might quickly lead to a large set of acceptance tests yielding the previously detailed undesired scenario.&lt;/p&gt;

&lt;p&gt;If not born in mind, a time-consuming testing pipeline will drag down the team&amp;rsquo;s iteration speed.&lt;/p&gt;

&lt;h1 id=&#34;enforcing-the-api-contract&#34;&gt;Enforcing the API contract&lt;/h1&gt;

&lt;p&gt;In order to overcome the aforementioned hurdle in the service we are creating at the moment, we implemented the following strategy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created &lt;a href=&#34;http://json-schema.org&#34;&gt;JSON Schemas&lt;/a&gt; for the API endpoints&amp;rsquo; responses. In order to enforce the API contract, all releases must be validated against them. There are several tools available to automate the validation of the defined schemas for example &lt;a href=&#34;https://pypi.python.org/pypi/jsonschema&#34;&gt;&lt;em&gt;jsonschema&lt;/em&gt;&lt;/a&gt; in Python.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Development of a new set of Unit Tests for our main endpoint (offering lots of flexibility on its usage), covering the different scenarios by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mocking the response of third-party services.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creating a set of JSON schemas whose properties are not set to &lt;em&gt;required&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Validating the returned response from the endpoint against the defined JSON Schemas by dynamically setting the required properties for each test according to the scenario.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Development of a new set of Integration Tests with the tightly coupled third-party services that would alert us of any breaking change on the 3rd party&amp;rsquo;s side. This can be achieved by validating that their response abides to the service&amp;rsquo;s contract defined in a JSON Schema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Development of a set of Acceptance Tests that check the different clients&amp;rsquo; use-cases and validates the endpoint&amp;rsquo;s responses against strict JSON Schemas (JSON Schemas in which all required properties are compulsory).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the acceptance tests&amp;rsquo;s schemas can be used as the service&amp;rsquo;s documentation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scheduling logrotate in CentOS</title>
      <link>https://esaezgil.com/post/logrotate_scheduling_centos/</link>
      <pubDate>Fri, 30 Dec 2016 11:54:24 +0200</pubDate>
      
      <guid>https://esaezgil.com/post/logrotate_scheduling_centos/</guid>
      <description>&lt;p&gt;Logs are a fundamental piece of the web server architecture for debugging, monitoring
and alerting purposes.
&lt;/p&gt;

&lt;p&gt;Some of the infrastructure at &lt;a href=&#34;https://www.skyscanner.net/hotels&#34;&gt;Skyscanner Hotels&lt;/a&gt;&amp;rsquo; Backend makes use of &lt;a href=&#34;https://github.com/etsy/logster&#34;&gt;logster&lt;/a&gt; to send logs to &lt;a href=&#34;https://graphiteapp.org/&#34;&gt;Graphite&lt;/a&gt; and generate alerts through &lt;a href=&#34;https://github.com/scobal/seyren&#34;&gt;Seyren&lt;/a&gt; enabling ChatOps through &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;. Although we usually check the different dashboards in &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt;, having a well-maintained set of logs is important for quickly looking up and investigating an event.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://esaezgil.com/img/alerting_monitoring_infrastructure_subset.png&#34; width=&#34;720&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Subset of the monitoring and alerting architecture&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.linuxcommand.org/man_pages/logrotate8.html&#34;&gt;Logrotate&lt;/a&gt; is a small utility that allows to &lt;em&gt;rotate&lt;/em&gt; the logs: archiving the current log, start a fresh one and delete old logs.&lt;/p&gt;

&lt;p&gt;Due to different reasons we were having problems with some of our logs and the fix turned out to be to schedule the log rotation at a specific time.&lt;/p&gt;

&lt;h4 id=&#34;in-order-to-schedule-the-log-rotate-in-our-centos-systems-we-followed-these-steps&#34;&gt;In order to schedule the log rotate in our CentOS systems we followed these steps:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Understand that logrotate is executed once a day. If we check the logrotate RPM
&lt;code&gt;rpm -ql logrotate&lt;/code&gt; we see something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;/etc/cron.daily/logrotate
/etc/logrotate.conf
/etc/logrotate.d
/usr/sbin/logrotate
/usr/share/doc/logrotate-3.8.6
/usr/share/doc/logrotate-3.8.6/CHANGES
/usr/share/doc/logrotate-3.8.6/COPYING
/usr/share/man/man5/logrotate.conf.5.gz
/usr/share/man/man8/logrotate.8.gz
/var/lib/logrotate.status
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The reason for &lt;code&gt;logrotate&lt;/code&gt; being executed once a day can be seen in the previous list. The RPM creates a configuration entry in the &lt;code&gt;/cron.daily/&lt;/code&gt; directory. Consequently, logrotate will be executed daily.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We would expect &lt;strong&gt;cron&lt;/strong&gt; to be in charge of the scheduling of this task. However, for CentOS systems, &lt;strong&gt;anacron&lt;/strong&gt; is the one in charge of the scheduling for daily events (among others). Furthermore, anacron introduces by default a random delay and it only starts running the scheduled tasks during the &lt;code&gt;START_HOURS_RANGE&lt;/code&gt; as configured in &lt;code&gt;/etc/anacrontab&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the logrotate at a specific time: moving the logrotate configuration out of the &lt;code&gt;/logrotate.daily/&lt;/code&gt; directory and scheduling its execution through cron.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example of the aforementioned solution can be achieved through &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; as follows (&lt;em&gt;we make use of Ansible through &lt;a href=&#34;https://www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt; for our automated deployment pipeline&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- name: check logrotate config exists in cron.daily
  stat: path=/etc/cron.daily/logrotate
  register: logrotate_config

- name: move logrotate config if existing
  command: mv /etc/cron.daily/logrotate /opt/home/logrotate.cronjob
  when: logrotate_config.stat.exists

- name: configure daily logrotate cron
  cron: name=&amp;quot;schedule logrotate&amp;quot; minute=&amp;quot;0&amp;quot; hour=&amp;quot;3&amp;quot; job=&amp;quot;/opt/home/logrotate.cronjob&amp;quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way, logrotate will be executed every day at 3 am.&lt;/p&gt;

&lt;p&gt;Credits:&lt;/p&gt;

&lt;p&gt;I shall thank my colleague Kampde for his detailed walkthrough about the intricacies of cron, anacron and RPMs among others.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://support.rackspace.com/how-to/understanding-logrotate-utility/&#34;&gt;Logrotate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://serverfault.com/questions/454118/why-does-my-centos-logrotate-run-at-random-times&#34;&gt;CentOS and logrotate at serverfault&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reasons for a blog</title>
      <link>https://esaezgil.com/post/reasons_for_a_blog/</link>
      <pubDate>Thu, 29 Dec 2016 01:37:32 +0200</pubDate>
      
      <guid>https://esaezgil.com/post/reasons_for_a_blog/</guid>
      <description>&lt;p&gt;I have been enjoying the &lt;a href=&#34;https://talkpython.fm/episodes/all&#34;&gt;Talk Python Podcast&lt;/a&gt; for a while and at least two episodes revolve around the importance of having a blog as a software developer.
&lt;/p&gt;

&lt;p&gt;In episode #69 &lt;a href=&#34;https://talkpython.fm/episodes/show/69/write-an-excellent-programming-blog&#34;&gt;Write an Excellent Programming Blog&lt;/a&gt; guest &lt;a href=&#34;https://twitter.com/jessejiryudavis&#34;&gt;A. Jesse Davis&lt;/a&gt; dissects the advice he gives in his own post &lt;a href=&#34;https://emptysqua.re/blog/write-an-excellent-programming-blog/&#34;&gt;Write an Excellent Programming Blog&lt;/a&gt; with tips for blog content and argues that blogging does not need to be regular but of high quality and lasting value, which I absolutely agree with.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Announcing &lt;a href=&#34;https://twitter.com/TalkPython&#34;&gt;@TalkPython&lt;/a&gt; #69: Write an Excellent Programming Blog with &lt;a href=&#34;https://twitter.com/jessejiryudavis&#34;&gt;@jessejiryudavis&lt;/a&gt; &lt;a href=&#34;https://t.co/2gk8Euv91E&#34;&gt;https://t.co/2gk8Euv91E&lt;/a&gt; &lt;a href=&#34;https://t.co/CmqosyEdGV&#34;&gt;pic.twitter.com/CmqosyEdGV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Talk Python Podcast (@TalkPython) &lt;a href=&#34;https://twitter.com/TalkPython/status/758040353396187137&#34;&gt;July 26, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;In episode #71 &lt;a href=&#34;https://talkpython.fm/episodes/show/71/soft-skills-the-software-developer-s-life-manual&#34;&gt;Soft Skills: The software developer&amp;rsquo;s life manual&lt;/a&gt; guest &lt;a href=&#34;http://twitter.com/jsonmez&#34;&gt;John Sonmez&lt;/a&gt; emphasizes the importance that the blog had for his own career and encourages others to do so. He also talks about his &lt;a href=&#34;https://esaezgil.github.io/page/books_finished/&#34;&gt;book that I read&lt;/a&gt; recently.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My new sounds: #71: Soft Skills: The software developer&amp;#39;s life manual &lt;a href=&#34;https://t.co/MrvePrpuCE&#34;&gt;https://t.co/MrvePrpuCE&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/hashtag/SoundCloud?src=hash&#34;&gt;#SoundCloud&lt;/a&gt;&lt;/p&gt;&amp;mdash; Talk Python Podcast (@TalkPython) &lt;a href=&#34;https://twitter.com/TalkPython/status/763888586752135168&#34;&gt;August 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;Both episodes were quite influential on my decision to create my blog.&lt;/p&gt;

&lt;p&gt;The main reason that I distilled from both episodes, quoting A. Jesse Davis, is: &lt;strong&gt;&amp;lsquo;your goal is to attract specialists in your field so you can share ideas with them&amp;rsquo;&lt;/strong&gt;. John Sonmez puts it in another way as finding your niche or specialization and becoming a reference for it.&lt;/p&gt;

&lt;p&gt;Furthermore, A. Jesse Davis provides an interesting generic list of topics to write about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Story&lt;/li&gt;
&lt;li&gt;Opinion&lt;/li&gt;
&lt;li&gt;How-To&lt;/li&gt;
&lt;li&gt;How Something Works&lt;/li&gt;
&lt;li&gt;Reviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reflecting back on my own blog I have covered so far either stories or reviews (Meetups, Hackathons, contributing to Open Source, books page). Topics I want to write about in the future are &lt;em&gt;How-tos&lt;/em&gt; and &lt;em&gt;How Something Works&lt;/em&gt;. I believe these two last topics are certainly the most valuable for others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Update]&lt;/strong&gt; Back in the day I also checked &lt;a href=&#34;https://www.troyhunt.com/the-ghost-who-codes-how-anonymity-is/&#34;&gt;this post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/troyhunt&#34;&gt;Troy Hunt&lt;/a&gt;. Although there&amp;rsquo;s some controversy around the topic, I believe that maintaining for a while a technical blog can help me improve my skills. An example for it that I look up to is &lt;a href=&#34;https://jeffknupp.com/&#34;&gt;Jeff Knupp&amp;rsquo;s blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scott Hanselman also refers to the invisible developers as &lt;code&gt;Dark matter&lt;/code&gt; in his &lt;a href=&#34;http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx&#34;&gt;post&lt;/a&gt; and states that there should be a balance between yelling online and getting actual stuff done, which I agree with and personally like to lean towards the actual getting stuff done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016 review</title>
      <link>https://esaezgil.com/post/enrique_2016_review/</link>
      <pubDate>Mon, 12 Dec 2016 19:37:32 +0200</pubDate>
      
      <guid>https://esaezgil.com/post/enrique_2016_review/</guid>
      <description>&lt;p&gt;2016 is coming to an end and I would like to look back and review what I have been up to during the last year:
&lt;/p&gt;

&lt;h1 id=&#34;hackathons&#34;&gt;Hackathons&lt;/h1&gt;

&lt;p&gt;During 2016 I attended 4 Hackathons:&lt;/p&gt;

&lt;h3 id=&#34;thack-mallorca&#34;&gt;THack Mallorca&lt;/h3&gt;

&lt;p&gt;I attended &lt;a href=&#34;https://www.tnooz.com/event/thack-mallorca-2016/&#34;&gt;THack Mallorca&lt;/a&gt; as a participant with my former colleague &lt;a href=&#34;https://twitter.com/motanelu&#34;&gt;Tudor Barbu&lt;/a&gt;. Joining two other developers from &lt;a href=&#34;http://www.minube.com&#34;&gt;MiNube&lt;/a&gt; we worked for the whole weekend and won several prizes. I wrote a post about the experience &lt;a href=&#34;https://esaezgil.github.io/events/thackmallorca16/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;More than 100 pro and student devs signed up for &lt;a href=&#34;https://twitter.com/hashtag/thackmallorca?src=hash&#34;&gt;#thackmallorca&lt;/a&gt; &lt;a href=&#34;https://twitter.com/tnooz&#34;&gt;@tnooz&lt;/a&gt; &lt;a href=&#34;https://t.co/SajkdBcivu&#34;&gt;pic.twitter.com/SajkdBcivu&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gene Quinn (@genequinn) &lt;a href=&#34;https://twitter.com/genequinn/status/728798299474546688&#34;&gt;May 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;h3 id=&#34;skyscanner-internal-hackathon&#34;&gt;Skyscanner internal Hackathon&lt;/h3&gt;

&lt;p&gt;Another team from &lt;a href=&#34;https://www.skyscanner.net/&#34;&gt;Skyscanner&lt;/a&gt; flew to Barcelona for some days and we worked in an internal Hackathon around some of our projects we felt could use some extra manpower. The Hackathon was very successful as we finished all the projects we started and as a consequence, some of my colleagues published an open source library: &lt;a href=&#34;https://github.com/Skyscanner/pyfailsafe&#34;&gt;pyfailsafe&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hackupc&#34;&gt;HackUPC&lt;/h3&gt;

&lt;p&gt;I attended &lt;a href=&#34;http://hackupc.com/&#34;&gt;HackUPC&lt;/a&gt; in Barcelona as a sponsor to help out hackers make use of the &lt;a href=&#34;http://en.business.skyscanner.net/&#34;&gt;Skyscanner API&lt;/a&gt;.  It was my first Hackathon as a sponsor and the experience was really good, read more about it &lt;a href=&#34;https://esaezgil.github.io/events/hackupc16/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Code or ping-pong? Both at &lt;a href=&#34;https://twitter.com/hashtag/hackupc?src=hash&#34;&gt;#hackupc&lt;/a&gt; Join us! &lt;a href=&#34;https://twitter.com/hashtag/skyscanner?src=hash&#34;&gt;#skyscanner&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/barcelona?src=hash&#34;&gt;#barcelona&lt;/a&gt; &lt;a href=&#34;https://t.co/N69diMVcn7&#34;&gt;https://t.co/N69diMVcn7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/784503844839497728&#34;&gt;October 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;h3 id=&#34;lauzhack&#34;&gt;LauzHack&lt;/h3&gt;

&lt;p&gt;I attended &lt;a href=&#34;http://lauzhack.com/&#34;&gt;LauzHack&lt;/a&gt; in Switzerland once again as a sponsor. I delivered a talk to help hackers get started with the &lt;a href=&#34;http://en.business.skyscanner.net/&#34;&gt;Skyscanner API&lt;/a&gt; and assist them over the rest of the weekend along my colleague &lt;a href=&#34;https://twitter.com/blckdt&#34;&gt;Manuel Miranda&lt;/a&gt;. I wrote about the experience &lt;a href=&#34;https://esaezgil.github.io/events/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Buddyflights &lt;a href=&#34;https://twitter.com/LauzHack&#34;&gt;@LauzHack&lt;/a&gt; using &lt;a href=&#34;https://twitter.com/hashtag/skyscanner?src=hash&#34;&gt;#skyscanner&lt;/a&gt; API for travel &lt;a href=&#34;https://t.co/tJLUxx1CeY&#34;&gt;https://t.co/tJLUxx1CeY&lt;/a&gt; it!@dtaschik &lt;a href=&#34;https://twitter.com/dubsmash&#34;&gt;@dubsmash&lt;/a&gt; &lt;a href=&#34;https://twitter.com/CodeVoyagers&#34;&gt;@CodeVoyagers&lt;/a&gt; &lt;a href=&#34;https://t.co/1HNCM22c1G&#34;&gt;pic.twitter.com/1HNCM22c1G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/800355990608691204&#34;&gt;November 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;h1 id=&#34;meetups&#34;&gt;Meetups&lt;/h1&gt;

&lt;p&gt;Being part of the Barcelona Ambassador group at Skyscanner&amp;rsquo;s Barcelona office provided me with the opportunity to both attend and help organizing multiple events for the software community in Barcelona:&lt;/p&gt;

&lt;h3 id=&#34;python-meetup&#34;&gt;Python Meetup&lt;/h3&gt;

&lt;p&gt;I have attended and help organizing most of the monthly &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python Meetup&lt;/a&gt; held at the office. From being a regular attendant I transitioned after my manager&amp;rsquo;s encouragement and the help of some of my team mates such as &lt;a href=&#34;https://twitter.com/pfreixes&#34;&gt;Pau Freixes&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/blckdt&#34;&gt;Manuel Miranda&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jordixou&#34;&gt;Jordi Soucheiron&lt;/a&gt; to deliver a talk. I wrote about the experience &lt;a href=&#34;https://esaezgil.github.io/post/python_best_practices/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;About to start October&amp;#39;s meetup. Full house! &lt;a href=&#34;https://twitter.com/hashtag/pybcn?src=hash&#34;&gt;#pybcn&lt;/a&gt; &lt;a href=&#34;https://t.co/t3XUY3DGEB&#34;&gt;pic.twitter.com/t3XUY3DGEB&lt;/a&gt;&lt;/p&gt;&amp;mdash; PyDataBCN 2017 (@pybcn) &lt;a href=&#34;https://twitter.com/pybcn/status/789151624086298624&#34;&gt;October 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;I continue to enjoy this Meetup and keep meeting new interesting people. It&amp;rsquo;s an event I would like to keep going over the upcoming year as well.&lt;/p&gt;

&lt;p&gt;Furthermore, I attended in November the &lt;a href=&#34;https://www.meetup.com/Madrid-Python-Meetup/&#34;&gt;Madrid Python Meetup&lt;/a&gt;, &lt;a href=&#34;https://esaezgil.github.io/post/python_meetup_madrid/&#34;&gt;check the post I wrote about it&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;docker-meetup&#34;&gt;Docker Meetup&lt;/h3&gt;

&lt;p&gt;During the weekend of the Docker anniversary, there were multiple events run all over the world. It was an informal gathering to talk about this technology. There was a brief introduction about Docker and a hands on lab in which we setup an example project.&lt;/p&gt;

&lt;p&gt;I also attended and helped organizing another &lt;a href=&#34;https://www.meetup.com/docker-barcelona-spain/&#34;&gt;Docker Meetup&lt;/a&gt;, this time during the week, in which &lt;a href=&#34;https://twitter.com/mattfgl&#34;&gt;Matt Feigal&lt;/a&gt;, an engineer from Google, talked about &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;. His talk was quite interesting as I could see a lot of similar concepts between the &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS cloud&lt;/a&gt; and the &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google cloud&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Starting a &lt;a href=&#34;https://twitter.com/hashtag/kubernetes?src=hash&#34;&gt;#kubernetes&lt;/a&gt; talk at full &lt;a href=&#34;https://twitter.com/hashtag/dockerbcn?src=hash&#34;&gt;#dockerbcn&lt;/a&gt;, thanks for filling it up &lt;a href=&#34;https://twitter.com/spiddy&#34;&gt;@spiddy&lt;/a&gt;  ! &lt;a href=&#34;https://t.co/mRzNTs9xcr&#34;&gt;pic.twitter.com/mRzNTs9xcr&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Feigal (@mattfgl) &lt;a href=&#34;https://twitter.com/mattfgl/status/737692360746881026&#34;&gt;May 31, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;h3 id=&#34;vlc-weekend-meetup&#34;&gt;VLC weekend Meetup&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.videolan.org/vlc/index.html&#34;&gt;VLC&lt;/a&gt; board met in Barcelona at our office (Skyscanner) during the weekend to discuss about their plans and whatnot. I had the opportunity to hang out with them during Saturday evening and during Sunday. Although we were not involved at all in their discussions it was nice to talk with the maintainers and leaders of such an important Open Source project.&lt;/p&gt;

&lt;h1 id=&#34;talks&#34;&gt;Talks&lt;/h1&gt;

&lt;p&gt;As I mentioned previously, I &lt;a href=&#34;https://esaezgil.github.io/post/python_best_practices/&#34;&gt;delivered a talk&lt;/a&gt; in the  &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python Meetup&lt;/a&gt;. It was a good experience since I learnt a lot while preparing for the talk and I look forward to deliver another one in the future. Take a look at the &lt;a href=&#34;https://speakerdeck.com/esaezgil/python-projects-best-practices-1&#34;&gt;slides&lt;/a&gt; and the &lt;a href=&#34;https://github.com/esaezgil/pythonBestPractices&#34;&gt;GitHub repo&lt;/a&gt; I created for it.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Best practices for a Python project&amp;quot; by Enrique Sáez &lt;a href=&#34;https://twitter.com/hashtag/pybcn?src=hash&#34;&gt;#pybcn&lt;/a&gt; &lt;a href=&#34;https://t.co/pkw3ulxPgE&#34;&gt;pic.twitter.com/pkw3ulxPgE&lt;/a&gt;&lt;/p&gt;&amp;mdash; PyDataBCN 2017 (@pybcn) &lt;a href=&#34;https://twitter.com/pybcn/status/789159836730679296&#34;&gt;October 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;I also delivered a talk at &lt;a href=&#34;http://lauzhack.com/&#34;&gt;LauzHack&lt;/a&gt; about the &lt;a href=&#34;http://en.business.skyscanner.net/&#34;&gt;Skyscanner API&lt;/a&gt;. Check the &lt;a href=&#34;https://speakerdeck.com/esaezgil/skyscanner-api-guide-lauzhack-16&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I delivered a &lt;a href=&#34;https://www.youtube.com/watch?v=PD2KGBIVbI0&amp;amp;feature=youtu.be&amp;amp;t=3664&#34;&gt;short closing talk&lt;/a&gt; at &lt;a href=&#34;https://hackupc.com/&#34;&gt;HackUPC’16&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;open-source-contributions&#34;&gt;Open Source Contributions&lt;/h1&gt;

&lt;p&gt;This year I started putting my GitHub account &lt;a href=&#34;https://github.com/esaezgil&#34;&gt;esaezgil&lt;/a&gt; to good use. I contributed to 3 different projects: &lt;a href=&#34;https://github.com/pallets/jinja&#34;&gt;Jinja&lt;/a&gt;, &lt;a href=&#34;https://github.com/KeepSafe/aiohttp&#34;&gt;aiohttp&lt;/a&gt; and &lt;a href=&#34;https://github.com/pretix/pretix&#34;&gt;Pretix&lt;/a&gt;. My contribution to Jinja is still pending to be merged but the other four contributions I did to both Pretix and aiohttp were merged.&lt;/p&gt;

&lt;p&gt;It was definitely a rewarding, sometimes challenging but overall good learning experience. I plan to keep contributing over the next year to Open Source projects.&lt;/p&gt;

&lt;p&gt;I wrote about my contributions here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://esaezgil.github.io/post/contributing-to-pretix/&#34;&gt;Contributing to Pretix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esaezgil.github.io/post/using-namedtuples-in-aiohttp/&#34;&gt;Contributing to aiohttp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thank you very much &lt;a href=&#34;https://twitter.com/vishalsodani&#34;&gt;@vishalsodani&lt;/a&gt; and Enrique for making your first contributions to pretix! &lt;a href=&#34;https://t.co/aUcxTT3Sg1&#34;&gt;https://t.co/aUcxTT3Sg1&lt;/a&gt; &lt;a href=&#34;https://t.co/Xp9cQMjsL4&#34;&gt;https://t.co/Xp9cQMjsL4&lt;/a&gt;&lt;/p&gt;&amp;mdash; pretix (@pretixeu) &lt;a href=&#34;https://twitter.com/pretixeu/status/770313299225374720&#34;&gt;August 29, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;h1 id=&#34;internet-famous&#34;&gt;Internet famous&lt;/h1&gt;

&lt;p&gt;I created my Twitter account, follow me :) &lt;a href=&#34;https://twitter.com/eqirn&#34;&gt;@eqirn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created this &lt;a href=&#34;https://esaezgil.github.io&#34;&gt;Blog&lt;/a&gt; with &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt; and automatic deployment through &lt;a href=&#34;https://www.wercker.com/&#34;&gt;Wercker&lt;/a&gt;. This was an iteration of my first attempt to create a &lt;a href=&#34;https://thinkreleaseblog.wordpress.com/&#34;&gt;blog&lt;/a&gt; using &lt;a href=&#34;https://www.wordpress.org&#34;&gt;Wordpress&lt;/a&gt;. I did not like the Wordpress interface and it looked quite shabby.&lt;/p&gt;

&lt;p&gt;I recorded a podcast along my former colleague &lt;a href=&#34;https://twitter.com/NVayias&#34;&gt;Nicolas Vayias&lt;/a&gt; about our experience as a recent employee of a rapidly growing startup. It was an interesting experience since the interview was not scripted and the host, &lt;a href=&#34;https://twitter.com/monkeybood&#34;&gt;Richard Davidson&lt;/a&gt;, was in another office in a different country. You can listen to it through &lt;a href=&#34;https://soundcloud.com/code-voyagers/episode-4-a-graduates-journey&#34;&gt;Codevoyagers SoundCloud&lt;/a&gt;.
Also check the post about it in the &lt;a href=&#34;http://codevoyagers.com/2016/05/05/double-podcast-a-chat-about-theory-of-constraints-with-guest-clarke-ching-and-a-graduates-journey-at-skyscanner/&#34;&gt;Codevoyagers&amp;rsquo;s blog&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;embed soundcloud&#34;&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;166&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/258981887&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;


&lt;h1 id=&#34;skyscanner-acquisition&#34;&gt;Skyscanner acquisition&lt;/h1&gt;

&lt;p&gt;I was on annual leave when I got to hear about this breaking news:
&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Here’s to making travel search easy as pie. V. exciting day for Skyscanner and travellers: Ctrip announces agreement to acquire Skyscanner.&lt;/p&gt;&amp;mdash; Skyscanner (@Skyscanner) &lt;a href=&#34;https://twitter.com/Skyscanner/status/801567505584181253&#34;&gt;November 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://english.ctrip.com/&#34;&gt;Ctrip&lt;/a&gt; acquired Skyscanner for &lt;a href=&#34;http://venturebeat.com/2016/12/09/skyscanners-1-7-billion-sale-to-chinas-ctrip-is-now-complete/&#34;&gt;$1.7 billion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exciting times ahead for us working towards helping travelers worldwide!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Madrid Python Meetup - November&#39;16</title>
      <link>https://esaezgil.com/post/python_meetup_madrid/</link>
      <pubDate>Thu, 01 Dec 2016 19:55:00 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/python_meetup_madrid/</guid>
      <description>&lt;p&gt;Last November I attended the &lt;a href=&#34;https://www.meetup.com/Madrid-Python-Meetup/events/235214434/&#34;&gt;Madrid Python Meetup&lt;/a&gt;. Being a regular attendant of &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python Meetup&lt;/a&gt; I was curious about the Python community in Madrid.
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;After many &lt;a href=&#34;https://twitter.com/pybcn&#34;&gt;@pybcn&lt;/a&gt; meetups, my first &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; meetup. Really welcoming community &lt;a href=&#34;https://twitter.com/hashtag/python?src=hash&#34;&gt;#python&lt;/a&gt; &lt;a href=&#34;https://t.co/mhTLMDou4Q&#34;&gt;pic.twitter.com/mhTLMDou4Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/804019613868716032&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;There were four talks, all of them revolving around Python and Geographic Information Systems. This was a topic that I have not dealt with at all and was curious about what Python can help with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st talk&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;¡Empieza la reunión de &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; y &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; en la sede de &lt;a href=&#34;https://twitter.com/CARTO&#34;&gt;@CARTO&lt;/a&gt;! &lt;a href=&#34;https://t.co/eX1tKVoMOr&#34;&gt;pic.twitter.com/eX1tKVoMOr&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804023120478830594&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/guillemborrell&#34;&gt;Guillem Borrell&lt;/a&gt; talked about whether Madrid pollution measurements were being rigged by the government. He showed how most of the pollution meters were placed further away from the city center and after analyzing historical measurements with the help of Python, concluded that apparently it was not the case.&lt;/p&gt;

&lt;p&gt;The most important take outs from his talk for me were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The data model and the obfuscation of the data in it can be part of the business model. By hindering competitors from using/accessing the data that is supposed to be freely available, such as the pollution measurements in this case, competitors are in disadvantage when when the contract is to be renewed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data Science consists on Data cleaning most of the time rather than creating/implementing new fancy algorithms which was quite surprising for me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2nd talk&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;Continúa Juan Luis (no &lt;a href=&#34;https://twitter.com/astrojuanlu&#34;&gt;@astrojuanlu&lt;/a&gt;) en &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; hablando de Cartopy y proyecciones &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://t.co/PvZCbUNObn&#34;&gt;pic.twitter.com/PvZCbUNObn&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804026521698582528&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;Juan Luis Ribero talked about geo referenced data visualization with Python. It was a really in-depth and long talk in which he explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the basics such as map projections like Mercator, Universal Transverse Mercator, Web Mercator, etc.&lt;/li&gt;
&lt;li&gt;detailed Cartopy API and the different data transformations that it helps accomplish&lt;/li&gt;
&lt;li&gt;talked through some examples using Cartopy, open data from the regional government to create some cool visualizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3rd talk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/oriolbx&#34;&gt;Oriol Boix&lt;/a&gt; briefly explained the Carto API. The Meetup was hosted at &lt;a href=&#34;https://carto.com/&#34;&gt;Carto&amp;rsquo;s&lt;/a&gt; office so it was rather natural that they put together a talk about their product.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;Continuamos hablando del nuevo SDK de &lt;a href=&#34;https://twitter.com/CARTO&#34;&gt;@CARTO&lt;/a&gt; en &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://t.co/jqz23yUAfO&#34;&gt;pic.twitter.com/jqz23yUAfO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804034266468352000&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4th talk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/fran_raga&#34;&gt;Francisco José Raga&lt;/a&gt; explained how to create Plugins for &lt;a href=&#34;http://qgis.org/en/site/&#34;&gt;QGIS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main learning I got from his talk is that the IDE should be considered as an extendable tool and whenever a developer finds himself doing something over and over again is much better to develop a plugin to automate the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Overall the topics discussed in the Meetup were not directly related to my day to day work but it was refreshing to learn about people using Python for so many different things.&lt;/p&gt;

&lt;p&gt;Finally, this kind of events are used by companies to recruit people and this time was no different. I have heard countless times about it as a suggestion for people looking for a job to attend or do a presentation at this kind of events and I believe it is an effective way to find a new job.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://carto.com/&#34;&gt;Carto&amp;rsquo;s&lt;/a&gt; office in the very city Center of Madrid were really cool by the way.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Hacer un plugin en &lt;a href=&#34;https://twitter.com/qgis&#34;&gt;@qgis&lt;/a&gt; es muy fácil&amp;quot; -Rafa (no me acuerdo de tu tuiter) &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; &lt;a href=&#34;https://t.co/2gP0ba35eV&#34;&gt;pic.twitter.com/2gP0ba35eV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ramiro Aznar (@ramiroaznar) &lt;a href=&#34;https://twitter.com/ramiroaznar/status/804043732165206016&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>LauzHack - Nov&#39;16</title>
      <link>https://esaezgil.com/events/</link>
      <pubDate>Tue, 22 Nov 2016 18:04:04 +0200</pubDate>
      
      <guid>https://esaezgil.com/events/</guid>
      <description>&lt;p&gt;Throughout the weekend of 18th - 20th November I attended &lt;a href=&#34;http://lauzhack.com&#34;&gt;Lauzhack&lt;/a&gt;, a student-organized and student-oriented Hackathon in Lausanne, Switzerland, as a &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt; representative.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Such lovely weather! Hackers at &lt;a href=&#34;https://twitter.com/LauzHack&#34;&gt;@LauzHack&lt;/a&gt;, check out the view! The Alps are are visible in all their glory! &lt;a href=&#34;https://twitter.com/hashtag/HackTheAlps?src=hash&#34;&gt;#HackTheAlps&lt;/a&gt; &lt;a href=&#34;https://t.co/32quDX60eW&#34;&gt;pic.twitter.com/32quDX60eW&lt;/a&gt;&lt;/p&gt;&amp;mdash; LauzHack (@LauzHack) &lt;a href=&#34;https://twitter.com/LauzHack/status/799973200994140160&#34;&gt;November 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;The goal of the Hackathon was to encourage students from all over the world to work in a project over the weekend with the aim of networking, learning as much as possible and having fun in the mean time.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;HackerSpace :D&lt;a href=&#34;https://twitter.com/hashtag/JustBuildIt?src=hash&#34;&gt;#JustBuildIt&lt;/a&gt; &lt;a href=&#34;https://t.co/jSildNCCBE&#34;&gt;pic.twitter.com/jSildNCCBE&lt;/a&gt;&lt;/p&gt;&amp;mdash; LauzHack (@LauzHack) &lt;a href=&#34;https://twitter.com/LauzHack/status/799984109414191104&#34;&gt;November 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;I attended with my colleague &lt;a href=&#34;https://twitter.com/blckdt&#34;&gt;Manuel Miranda&lt;/a&gt; in order to help hackers make use of the Skyscanner API in their projects. We also looked forward to spread the word about &lt;a href=&#34;(http://skyscanner.net/jobs/graduates/)&#34;&gt;Skyscanner graduate program&lt;/a&gt;, &lt;a href=&#34;http://skyscanner.net/jobs/graduates/&#34;&gt;Skyscanner internships&lt;/a&gt; and company culture.&lt;/p&gt;

&lt;p&gt;During the weekend we had the chance to address students in both the initial talk and in a tech talk. I delivered a tech talk in order to get hackers up and running in about 20 minutes with the Skyscanner API and its different endpoints.&lt;/p&gt;

&lt;p&gt;These are the slides for the presentation:&lt;/p&gt;

&lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;6ebaec24d33a4a1f91b41a683d26f6f1&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;

&lt;p&gt;During the rest of the weekend we tended to questions that hackers came up with during the development of their projects. It is a truly enriching experience when people find new usages for the provided data and it is specially valuable when some of them even find bugs that we can report back to our colleagues!&lt;/p&gt;

&lt;p&gt;The event itself was really well organized and the premises of &lt;a href=&#34;http://www.epfl.ch/index.en.html&#34;&gt;EPFL&lt;/a&gt; are top notch.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Come have a chat with our sponsors at their booths about the cool tech they brought! &lt;a href=&#34;https://t.co/ZBamhr0Jom&#34;&gt;pic.twitter.com/ZBamhr0Jom&lt;/a&gt;&lt;/p&gt;&amp;mdash; LauzHack (@LauzHack) &lt;a href=&#34;https://twitter.com/LauzHack/status/799917130468556800&#34;&gt;November 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;The projects I liked the most using &lt;a href=&#34;http://business.skyscanner.net/&#34;&gt;Skyscanner API&lt;/a&gt; were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devpost.com/software/travcal-boxpea&#34;&gt;TravCal&lt;/a&gt;: after setting the departure airport, Travcal queries for cached ticket prices and Hotel prices in different destinations and suggests tentative trips along its fares in your calendar. It was quite clever of them to make use of the calendar as it is instantly multi-device compliant from the very beginning. They won our Skyscanner challenge prize.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devpost.com/software/buddyflights&#34;&gt;BuddyFlights&lt;/a&gt;: the project suggests based on your Facebook friends&amp;rsquo; location intermediate stops for your journey along the price of the tickets. I love the idea and I hope that these guys keep working on it or even helps inspire our internal team in charge of the inspiration map in the website.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devpost.com/software/citymatch&#34;&gt;CityMatch&lt;/a&gt;: this project included gamification in order to suggest travel destinations making use of Microsoft Cognitive services. I was instantly sold into the idea and hope that they keep working on it in the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Buddyflights &lt;a href=&#34;https://twitter.com/LauzHack&#34;&gt;@LauzHack&lt;/a&gt; using &lt;a href=&#34;https://twitter.com/hashtag/skyscanner?src=hash&#34;&gt;#skyscanner&lt;/a&gt; API for travel &lt;a href=&#34;https://t.co/tJLUxx1CeY&#34;&gt;https://t.co/tJLUxx1CeY&lt;/a&gt; it!@dtaschik &lt;a href=&#34;https://twitter.com/dubsmash&#34;&gt;@dubsmash&lt;/a&gt; &lt;a href=&#34;https://twitter.com/CodeVoyagers&#34;&gt;@CodeVoyagers&lt;/a&gt; &lt;a href=&#34;https://t.co/1HNCM22c1G&#34;&gt;pic.twitter.com/1HNCM22c1G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/800355990608691204&#34;&gt;November 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;The projects I liked the most using other sponsor&amp;rsquo;s APIs were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devpost.com/software/will-i-be-late&#34;&gt;WillIbeLate&lt;/a&gt;: making use of SBB data to predict train delays based on the day, the route and the weather.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devpost.com/software/openallergies&#34;&gt;OpenAllergies&lt;/a&gt;: making use of the recently launched &lt;a href=&#34;https://www.openfood.ch/&#34;&gt;OpenFood&lt;/a&gt; API they warn the user about possible allergies by scanning a product&amp;rsquo;s barcode.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My take out points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As a sponsor I really enjoyed the event. I had the chance to learn about challenges other sponsors face on a daily basis and found out about new cool technologies and products they are developing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is my 5th Hackathon over the last year (2nd as sponsor) and I keep enjoying the thrill and out of the box thinking fostered by this kind of events.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hackathons set the perfect ambiance for innovation. Working within a strict timeframe helps effectively deliver the basics of an impactful product.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to LauzHack&amp;rsquo;17&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HackUPC&#39;16</title>
      <link>https://esaezgil.com/events/hackupc16/</link>
      <pubDate>Sun, 23 Oct 2016 18:34:25 +0200</pubDate>
      
      <guid>https://esaezgil.com/events/hackupc16/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hackupc.com/&#34;&gt;HackUPC&lt;/a&gt; is a student-led and student-oriented hackathon for tech-enthusiast held in Barcelona, at the premises of Universitat Politecnica de Catalunya over the weekend of October 1st 2016.&lt;/p&gt;

&lt;p&gt;I attended the event as a company representative for &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;, the main sponsor of the event. The hackathon gathered 500 students from all over the world and was an immense success.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;HackUPC Fall 2016 opening ceremony is about to start. The auditorium is filled with excitement! &lt;a href=&#34;https://t.co/FWxtD0YEfX&#34;&gt;pic.twitter.com/FWxtD0YEfX&lt;/a&gt;&lt;/p&gt;&amp;mdash; HackUPC (@hackupc) &lt;a href=&#34;https://twitter.com/hackupc/status/784441926577717248&#34;&gt;October 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;This was my 4th hackathon over the last year so far but my first one as a sponsor and not a participant. Therefore, the event gave me the opportunity to gain a different insight for this kind of events.&lt;/p&gt;

&lt;p&gt;I spent about 18 hours at the event during weekend with the goal of helping participants make the most out of &lt;a href=&#34;http://en.business.skyscanner.net/&#34;&gt;Skyscanner API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quality of the submissions was astonishing. It is quite refreshing to see how much can be achieved over a weekend of intense work and collaboration. The projects submitted making use of the &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt; API are posted &lt;a href=&#34;https://hackupc2016f.devpost.com/submissions/search?utf8=%E2%9C%93&amp;amp;prize_filter%5Bprizes%5D%5B%5D=12500&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite moments during the Hackathon was the &amp;lsquo;Science Fair&amp;rsquo; demos at the end of the event. As part of the judging panel for the Skyscanner prizes I got to know the motivations behind the projects that were crafted during the weekend and learnt more about the rapid prototyping techniques and technologies that hackers made use of to create an MVP.&lt;/p&gt;

&lt;p&gt;Finally, I had the chance to deliver &lt;a href=&#34;https://www.youtube.com/watch?v=PD2KGBIVbI0&amp;amp;feature=youtu.be&amp;amp;t=3664&#34;&gt;a short talk&lt;/a&gt; at the end of the event where I encouraged attendees to apply for a &lt;a href=&#34;http://www.skyscanner.net/jobs/&#34;&gt;position at Skyscanner&lt;/a&gt; after talking with them over the weekend about company culture and mission.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Code or ping-pong? Both at &lt;a href=&#34;https://twitter.com/hashtag/hackupc?src=hash&#34;&gt;#hackupc&lt;/a&gt; Join us! &lt;a href=&#34;https://twitter.com/hashtag/skyscanner?src=hash&#34;&gt;#skyscanner&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/barcelona?src=hash&#34;&gt;#barcelona&lt;/a&gt; &lt;a href=&#34;https://t.co/N69diMVcn7&#34;&gt;https://t.co/N69diMVcn7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/784503844839497728&#34;&gt;October 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;
Overall, attending this event as a sponsor was a really good experience.
Looking forward to attend another hackathon soon enough!

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;We had an incredible time at &lt;a href=&#34;https://twitter.com/hashtag/HackUPC?src=hash&#34;&gt;#HackUPC&lt;/a&gt; to kick off the 2017 Hackathon Season! We can&amp;#39;t wait to see you all again in February 👏👏 &lt;a href=&#34;https://t.co/NsuJKggSgA&#34;&gt;pic.twitter.com/NsuJKggSgA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Major League Hacking (@MLHacks) &lt;a href=&#34;https://twitter.com/MLHacks/status/785133806915313664&#34;&gt;October 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://esaezgil.com/page/enrique/</link>
      <pubDate>Sat, 22 Oct 2016 20:17:14 +0200</pubDate>
      
      <guid>https://esaezgil.com/page/enrique/</guid>
      <description>&lt;p&gt;I am a telecom engineer working as a software engineer at &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;. This blog is just a quick reference for mainly technical stuff I find interesting. If you wanna get in touch, hit me up on &lt;a href=&#34;https://twitter.com/eqirn&#34;&gt;@equirn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more about me listening to this podcast: &lt;a href=&#34;https://soundcloud.com/code-voyagers/episode-4-a-graduates-journey&#34;&gt;Episode 4 – A graduates journey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also part of the Skyscanner Barcelona Ambassador group in charge of organizing events at the &lt;a href=&#34;https://twitter.com/codevoyagers&#34;&gt;@CodeVoyagers&lt;/a&gt; office for the software developer community in Barcelona like the &lt;a href=&#34;http://www.meetup.com/es-ES/python-185/&#34;&gt;Python meetup&lt;/a&gt; or the &lt;a href=&#34;https://www.meetup.com/docker-barcelona-spain/&#34;&gt;Docker meetup&lt;/a&gt; among others. Feel free to get in touch if you are looking for a space to host your SW-related meetup in Barcelona&lt;/p&gt;

&lt;div class=&#34;embed soundcloud&#34;&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;166&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/258981887&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Talk: Python Best Practices</title>
      <link>https://esaezgil.com/post/python_best_practices/</link>
      <pubDate>Sat, 22 Oct 2016 19:37:32 +0200</pubDate>
      
      <guid>https://esaezgil.com/post/python_best_practices/</guid>
      <description>&lt;p&gt;Over the last year I have attended the &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python meetup&lt;/a&gt; hosted at &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;&amp;rsquo;s office.
The meetups were a really positive experience and being a super welcoming community I decided to deliver a talk.
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Best practices for a Python project&amp;quot; by Enrique Sáez &lt;a href=&#34;https://twitter.com/hashtag/pybcn?src=hash&#34;&gt;#pybcn&lt;/a&gt; &lt;a href=&#34;https://t.co/pkw3ulxPgE&#34;&gt;pic.twitter.com/pkw3ulxPgE&lt;/a&gt;&lt;/p&gt;&amp;mdash; PyDataBCN 2017 (@pybcn) &lt;a href=&#34;https://twitter.com/pybcn/status/789159836730679296&#34;&gt;October 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;During the talk I covered the most common Python project&amp;rsquo;s structure and the resasoning behind it. I also went over the usual ways for distributing a Python Project and the popular testing tools available. Finally I also mentioned some of the widely regarded best practices for Python like PEP8.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slides:&lt;/strong&gt;&lt;/p&gt;

&lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;2e42ac8c87a24bc3ad90cc5a40cc894a&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;GitHub repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/esaezgil/pythonBestPractices&#34;&gt;https://github.com/esaezgil/pythonBestPractices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately due to technical problems the talk was not recorded :(&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>https://esaezgil.com/page/talks/</link>
      <pubDate>Sat, 22 Oct 2016 18:30:50 +0200</pubDate>
      
      <guid>https://esaezgil.com/page/talks/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I delivered a talk in the &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python Meetup&lt;/a&gt; about Python Best Practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/esaezgil/python-projects-best-practices-1&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esaezgil.com/post/python_best_practices/&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I delivered a talk during the &lt;a href=&#34;http://lauzhack.com/&#34;&gt;LauzHack Hackathon&lt;/a&gt; about how to make use of the &lt;a href=&#34;https://partners.skyscanner.net/travel-apis/&#34;&gt;Skyscanner API&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/esaezgil/skyscanner-api-guide-lauzhack-16&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esaezgil.com/events/&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I delivered a short closing talk at HackUPC&amp;rsquo;16:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PD2KGBIVbI0&amp;amp;feature=youtu.be&amp;amp;t=3664&#34;&gt;Link to talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esaezgil.com/events/hackupc16/&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing to Pretix</title>
      <link>https://esaezgil.com/post/2016-09-04-contributing-to-pretix/</link>
      <pubDate>Sun, 04 Sep 2016 13:24:25 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/2016-09-04-contributing-to-pretix/</guid>
      <description>&lt;p&gt;Recently I had the chance to contribute to Pretix (&lt;a href=&#34;https://pretix.eu/about/en/&#34;&gt;https://pretix.eu/about/en/&lt;/a&gt;) a Django-based event ticketing platform.&lt;/p&gt;

&lt;p&gt;I submitted a couple of merge requests that were accepted:
 - &lt;a href=&#34;https://github.com/pretix/pretix/pull/202/files&#34;&gt;https://github.com/pretix/pretix/pull/202/files&lt;/a&gt; &lt;a href=&#34;https://github.com/pretix/pretix/pull/204/files&#34;&gt;https://github.com/pretix/pretix/pull/204/files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will briefly detail some of the key learnings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Django models&lt;/strong&gt;: Being absolutely new to Django, I had the opportunity to learn along the way about one of its key features, the Models.
Models are objects that the ORM will store in the database, a quick intro here: 
&lt;a href=&#34;http://tutorial.djangogirls.org/en/django_orm/&#34;&gt;http://tutorial.djangogirls.org/en/django_orm/&lt;/a&gt;
It was quite surprising as well the ease of the development thanks to the automatic migrations in the database schema.
More detailed info on Models here:
&lt;a href=&#34;http://www.djangobook.com/en/2.0/chapter05.html&#34;&gt;http://www.djangobook.com/en/2.0/chapter05.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;all keyword in Python&lt;/strong&gt;:
In order to check whether a condition was True for all the elements of a list I simply iterated over them and checked for the condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i, op &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;enumerate&lt;/span&gt;(positions):
    cancelable_products&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;append(op&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;item&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;allow_cancel)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; cancelable_products:
    cancelable &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However a much simpler solution making use of list comprehensions and the all() keyword in Python is possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cancelable &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;all&lt;/span&gt;([op&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;item&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;allow_cancel &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; positions])
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metaclasses in Python&lt;/strong&gt;:
Although I had read about Python Metaclasses in this excellent post (&lt;a href=&#34;https://jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/&#34;&gt;https://jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/&lt;/a&gt;), Django Models are a really good practical example of their value and use.
The Metaclasses are used in the Django Models to dynamically create classes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Difference between select_related and prefetch_related in Django:&lt;/strong&gt;
&lt;strong&gt;prefetch_related&lt;/strong&gt;: does a separate lookup for each relationship, and does the ‘joining’ in Python. This allows it to prefetch many-to-many and many-to-one objects.
&lt;br&gt;
&lt;strong&gt;select_related&lt;/strong&gt;: limited to single-valued relationships - foreign key and one-to-one. Creates an SQL join including the fields of the related object in the &lt;code&gt;SELECT&lt;/code&gt;statement retrieving the related objects in the same (but more complex) database query.
&lt;br&gt;
By using &lt;code&gt;select_related&lt;/code&gt; instead of &lt;code&gt;prefetch_related&lt;/code&gt;, one query to the DB is saved.
 More info on Django QuerySet: &lt;a href=&#34;https://docs.djangoproject.com/en/1.10/ref/models/querysets/&#34;&gt;https://docs.djangoproject.com/en/1.10/ref/models/querysets/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Head over to this post for more details on Metaclasses in Django: &lt;a href=&#34;http://reinout.vanrees.org/weblog/2013/05/16/advanced-python-metaclasses.html&#34;&gt;http://reinout.vanrees.org/weblog/2013/05/16/advanced-python-metaclasses.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Contributing to aiohttp</title>
      <link>https://esaezgil.com/post/2016-09-03-using-namedtuples-in-aiohttp/</link>
      <pubDate>Sat, 03 Sep 2016 14:34:00 +0100</pubDate>
      
      <guid>https://esaezgil.com/post/2016-09-03-using-namedtuples-in-aiohttp/</guid>
      <description>&lt;p&gt;Recently I had the opportunity to contribute to the &lt;a href=&#34;https://github.com/KeepSafe/aiohttp/&#34;&gt;&lt;strong&gt;aiohttp&lt;/strong&gt; library&lt;/a&gt;. This is one of the libraries that we, the &lt;a href=&#34;https://www.skyscanner.net/hotels&#34;&gt;Hotels&lt;/a&gt; backend team at &lt;a href=&#34;https://www.skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;, make use of on a daily basis to create a new backend service. 
In this post I will briefly explain the main learnings from this contribution.&lt;/p&gt;

&lt;p&gt;The pull request can be found here:
&lt;a href=&#34;https://github.com/KeepSafe/aiohttp/pull/1020/files&#34;&gt;https://github.com/KeepSafe/aiohttp/pull/1020/files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key learnings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Living on the edge:&lt;/p&gt;

&lt;p&gt;Working in the &lt;em&gt;master&lt;/em&gt; branch of a project means that sometimes it may be unhealthy.
It is always good advice to check whether &lt;em&gt;master&lt;/em&gt; is healthy or not when you submit your MR to the CI system (&lt;a href=&#34;https://travis-ci.org/KeepSafe/aiohttp&#34;&gt;Travis CI&lt;/a&gt; in this case) before pulling your hair searching for a non existing bug in your code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Namedtuples can be used to define a class through inheritance and by implementing the &lt;strong&gt;bool&lt;/strong&gt; method,&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;WebSocketReady&lt;/span&gt;(namedtuple(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;WebSocketReady&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;ok protocol&amp;#39;&lt;/span&gt;)):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__bool__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ok
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;it is really easy to check for a condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; WebSocketReady:
&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write Unit Tests:
This might be obvious, but the point is not just to write them but to write them for every piece of code created.
In this case I had written tests that checked the actual functionality on a high level like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_websocket_not_ready&lt;/span&gt;():
    websocket_ready &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; WebSocketReady(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; websocket_ready&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ok &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; websocket_ready&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;protocol &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But not the tests that checked the low level functionality like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_bool_websocket_not_ready&lt;/span&gt;():
    websocket_ready &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; WebSocketReady(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;bool&lt;/span&gt;(websocket_ready) &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Always good to bear in mind.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>