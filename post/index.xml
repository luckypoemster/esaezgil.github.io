<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Hej, I&#39;m Enrique</title>
    <link>https://esaezgil.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Hej, I&#39;m Enrique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Dec 2016 19:55:00 +0100</lastBuildDate>
    <atom:link href="https://esaezgil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Madrid Python Meetup - November&#39;16</title>
      <link>https://esaezgil.github.io/post/python_meetup_madrid/</link>
      <pubDate>Thu, 01 Dec 2016 19:55:00 +0100</pubDate>
      
      <guid>https://esaezgil.github.io/post/python_meetup_madrid/</guid>
      <description>&lt;p&gt;Last November I attended the &lt;a href=&#34;https://www.meetup.com/Madrid-Python-Meetup/events/235214434/&#34;&gt;Madrid Python Meetup&lt;/a&gt;. Being a regular attendant of &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python Meetup&lt;/a&gt; I was curious about the Python community in Madrid.
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;After many &lt;a href=&#34;https://twitter.com/pybcn&#34;&gt;@pybcn&lt;/a&gt; meetups, my first &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; meetup. Really welcoming community &lt;a href=&#34;https://twitter.com/hashtag/python?src=hash&#34;&gt;#python&lt;/a&gt; &lt;a href=&#34;https://t.co/mhTLMDou4Q&#34;&gt;pic.twitter.com/mhTLMDou4Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; Enrique (@eqirn) &lt;a href=&#34;https://twitter.com/eqirn/status/804019613868716032&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;There were four talks, all of them revolving around Python and Geographic Information Systems. This was a topic that I have not dealt with at all and was curious about what Python can help with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st talk&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;¡Empieza la reunión de &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; y &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; en la sede de &lt;a href=&#34;https://twitter.com/CARTO&#34;&gt;@CARTO&lt;/a&gt;! &lt;a href=&#34;https://t.co/eX1tKVoMOr&#34;&gt;pic.twitter.com/eX1tKVoMOr&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804023120478830594&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/guillemborrell&#34;&gt;Guillem Borrell&lt;/a&gt; talked about whether Madrid pollution measurements were being rigged by the government. He showed how most of the pollution meters were placed further away from the city center and after analyzing historical measurements with the help of Python, concluded that apparently it was not the case.&lt;/p&gt;

&lt;p&gt;The most important take outs from his talk for me were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The data model and the obfuscation of the data in it can be part of the business model. By hindering competitors from using/accessing the data that is supposed to be freely available, such as the pollution measurements in this case, competitors are in disadvantage when when the contract is to be renewed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data Science consists on Data cleaning most of the time rather than creating/implementing new fancy algorithms which was quite surprising for me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2nd talk&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;Continúa Juan Luis (no &lt;a href=&#34;https://twitter.com/astrojuanlu&#34;&gt;@astrojuanlu&lt;/a&gt;) en &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; hablando de Cartopy y proyecciones &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://t.co/PvZCbUNObn&#34;&gt;pic.twitter.com/PvZCbUNObn&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804026521698582528&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;Juan Luis Ribero talked about geo referenced data visualization with Python. It was a really in-depth and long talk in which he explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the basics such as map projections like Mercator, Universal Transverse Mercator, Web Mercator, etc.&lt;/li&gt;
&lt;li&gt;detailed Cartopy API and the different data transformations that it helps accomplish&lt;/li&gt;
&lt;li&gt;talked through some examples using Cartopy, open data from the regional government to create some cool visualizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3rd talk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/oriolbx&#34;&gt;Oriol Boix&lt;/a&gt; briefly explained the Carto API. The Meetup was hosted at &lt;a href=&#34;https://carto.com/&#34;&gt;Carto&amp;rsquo;s&lt;/a&gt; office so it was rather natural that they put together a talk about their product.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;Continuamos hablando del nuevo SDK de &lt;a href=&#34;https://twitter.com/CARTO&#34;&gt;@CARTO&lt;/a&gt; en &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://t.co/jqz23yUAfO&#34;&gt;pic.twitter.com/jqz23yUAfO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pybonacci (@Pybonacci) &lt;a href=&#34;https://twitter.com/Pybonacci/status/804034266468352000&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4th talk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/fran_raga&#34;&gt;Francisco José Raga&lt;/a&gt; explained how to create Plugins for &lt;a href=&#34;http://qgis.org/en/site/&#34;&gt;QGIS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main learning I got from his talk is that the IDE should be considered as an extendable tool and whenever a developer finds himself doing something over and over again is much better to develop a plugin to automate the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Overall the topics discussed in the Meetup were not directly related to my day to day work but it was refreshing to learn about people using Python for so many different things.&lt;/p&gt;

&lt;p&gt;Finally, this kind of events are used by companies to recruit people and this time was no different. I have heard countless times about it as a suggestion for people looking for a job to attend or do a presentation at this kind of events and I believe it is an effective way to find a new job.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://carto.com/&#34;&gt;Carto&amp;rsquo;s&lt;/a&gt; office in the very city Center of Madrid were really cool by the way.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Hacer un plugin en &lt;a href=&#34;https://twitter.com/qgis&#34;&gt;@qgis&lt;/a&gt; es muy fácil&amp;quot; -Rafa (no me acuerdo de tu tuiter) &lt;a href=&#34;https://twitter.com/GeoinquietosMad&#34;&gt;@GeoinquietosMad&lt;/a&gt; &lt;a href=&#34;https://twitter.com/python_madrid&#34;&gt;@python_madrid&lt;/a&gt; &lt;a href=&#34;https://t.co/2gP0ba35eV&#34;&gt;pic.twitter.com/2gP0ba35eV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ramiro Aznar (@ramiroaznar) &lt;a href=&#34;https://twitter.com/ramiroaznar/status/804043732165206016&#34;&gt;November 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Talk: Python Best Practices</title>
      <link>https://esaezgil.github.io/post/python_best_practices/</link>
      <pubDate>Sat, 22 Oct 2016 19:37:32 +0200</pubDate>
      
      <guid>https://esaezgil.github.io/post/python_best_practices/</guid>
      <description>&lt;p&gt;Over the last year I have attended the &lt;a href=&#34;https://www.meetup.com/python-185/&#34;&gt;Barcelona Python meetup&lt;/a&gt; hosted at &lt;a href=&#34;http://skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;&amp;rsquo;s office.
The meetups were a really positive experience and being a super welcoming community I decided to deliver a talk.
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Best practices for a Python project&amp;quot; by Enrique Sáez &lt;a href=&#34;https://twitter.com/hashtag/pybcn?src=hash&#34;&gt;#pybcn&lt;/a&gt; &lt;a href=&#34;https://t.co/pkw3ulxPgE&#34;&gt;pic.twitter.com/pkw3ulxPgE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Python Barcelona (@pybcn) &lt;a href=&#34;https://twitter.com/pybcn/status/789159836730679296&#34;&gt;October 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/blockquote&gt;

&lt;p&gt;During the talk I covered the most common Python project&amp;rsquo;s structure and the resasoning behind it. I also went over the usual ways for distributing a Python Project and the popular testing tools available. Finally I also mentioned some of the widely regarded best practices for Python like PEP8.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slides:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;2e42ac8c87a24bc3ad90cc5a40cc894a&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Contributing to Pretix</title>
      <link>https://esaezgil.github.io/post/contributing-to-pretix/</link>
      <pubDate>Sun, 04 Sep 2016 13:24:25 +0000</pubDate>
      
      <guid>https://esaezgil.github.io/post/contributing-to-pretix/</guid>
      <description>&lt;p&gt;Recently I had the chance to contribute to Pretix (&lt;a href=&#34;https://pretix.eu/about/en/&#34;&gt;https://pretix.eu/about/en/&lt;/a&gt;) a Django-based event ticketing platform.&lt;/p&gt;

&lt;p&gt;The Merge Request is here: &lt;a href=&#34;https://github.com/pretix/pretix/pull/204/files&#34;&gt;https://github.com/pretix/pretix/pull/204/files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key learnings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Django models&lt;/strong&gt;: Being absolutely new to Django, I had the opportunity to learn along the way about one of its key features, the Models.
Models are objects that the ORM will store in the database, a quick intro here: 
&lt;a href=&#34;http://tutorial.djangogirls.org/en/django_orm/&#34;&gt;http://tutorial.djangogirls.org/en/django_orm/&lt;/a&gt;
It was quite surprising as well the ease of the development thanks to the automatic migrations in the database schema.
More detailed info on Models here:
&lt;a href=&#34;http://www.djangobook.com/en/2.0/chapter05.html&#34;&gt;http://www.djangobook.com/en/2.0/chapter05.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;all keyword in Python&lt;/strong&gt;:
In order to check whether a condition was True for all the elements of a list I simply iterated over them and checked for the condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i, op &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;enumerate&lt;/span&gt;(positions):
    cancelable_products&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;append(op&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;item&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;allow_cancel)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; cancelable_products:
    cancelable &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However a much simpler solution making use of list comprehensions and the all() keyword in Python is possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cancelable &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;all&lt;/span&gt;([op&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;item&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;allow_cancel &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; positions])
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metaclasses in Python&lt;/strong&gt;:
Although I had read about Python Metaclasses in this excellent post (&lt;a href=&#34;https://jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/&#34;&gt;https://jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/&lt;/a&gt;), Django Models are a really good practical example of their value and use.
The Metaclasses are used in the Django Models to dynamically create classes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Difference between select_related and prefetch_related in Django:&lt;/strong&gt;
&lt;strong&gt;prefetch_related&lt;/strong&gt;: does a separate lookup for each relationship, and does the ‘joining’ in Python. This allows it to prefetch many-to-many and many-to-one objects.
&lt;br&gt;
&lt;strong&gt;select_related&lt;/strong&gt;: limited to single-valued relationships - foreign key and one-to-one. Creates an SQL join including the fields of the related object in the &lt;code&gt;SELECT&lt;/code&gt;statement retrieving the related objects in the same (but more complex) database query.
&lt;br&gt;
By using &lt;code&gt;select_related&lt;/code&gt; instead of &lt;code&gt;prefetch_related&lt;/code&gt;, one query to the DB is saved.
 More info on Django QuerySet: &lt;a href=&#34;https://docs.djangoproject.com/en/1.10/ref/models/querysets/&#34;&gt;https://docs.djangoproject.com/en/1.10/ref/models/querysets/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Head over to this post for more details on Metaclasses in Django: &lt;a href=&#34;http://reinout.vanrees.org/weblog/2013/05/16/advanced-python-metaclasses.html&#34;&gt;http://reinout.vanrees.org/weblog/2013/05/16/advanced-python-metaclasses.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Contributing to aiohttp</title>
      <link>https://esaezgil.github.io/post/using-namedtuples-in-aiohttp/</link>
      <pubDate>Sat, 03 Sep 2016 14:34:00 +0000</pubDate>
      
      <guid>https://esaezgil.github.io/post/using-namedtuples-in-aiohttp/</guid>
      <description>&lt;p&gt;Recently I had the opportunity to contribute to the &lt;a href=&#34;https://github.com/KeepSafe/aiohttp/&#34;&gt;&lt;strong&gt;aiohttp&lt;/strong&gt; library&lt;/a&gt;. This is one of the libraries that we, the &lt;a href=&#34;https://www.skyscanner.net/hotels&#34;&gt;Hotels&lt;/a&gt; backend team at &lt;a href=&#34;https://www.skyscanner.net&#34;&gt;Skyscanner&lt;/a&gt;, make use of on a daily basis to create a new backend service. 
In this post I will briefly explain the main learnings from this contribution.&lt;/p&gt;

&lt;p&gt;The pull request can be found here:
&lt;a href=&#34;https://github.com/KeepSafe/aiohttp/pull/1020/files&#34;&gt;https://github.com/KeepSafe/aiohttp/pull/1020/files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key learnings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Living on the edge:&lt;/p&gt;

&lt;p&gt;Working in the &lt;em&gt;master&lt;/em&gt; branch of a project means that sometimes it may be unhealthy.
It is always good advice to check whether &lt;em&gt;master&lt;/em&gt; is healthy or not when you submit your MR to the CI system (&lt;a href=&#34;https://travis-ci.org/KeepSafe/aiohttp&#34;&gt;Travis CI&lt;/a&gt; in this case) before pulling your hair searching for a non existing bug in your code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Namedtuples can be used to define a class through inheritance and by implementing the &lt;strong&gt;bool&lt;/strong&gt; method,&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;WebSocketReady&lt;/span&gt;(namedtuple(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;WebSocketReady&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;ok protocol&amp;#39;&lt;/span&gt;)):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__bool__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ok
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;it is really easy to check for a condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; WebSocketReady:
&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write Unit Tests:
This might be obvious, but the point is not just to write them but to write them for every piece of code created.
In this case I had written tests that checked the actual functionality on a high level like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_websocket_not_ready&lt;/span&gt;():
    websocket_ready &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; WebSocketReady(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; websocket_ready&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ok &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; websocket_ready&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;protocol &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But not the tests that checked the low level functionality like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;test_bool_websocket_not_ready&lt;/span&gt;():
    websocket_ready &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; WebSocketReady(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;None&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;bool&lt;/span&gt;(websocket_ready) &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Always good to bear in mind.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>